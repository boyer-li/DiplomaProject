{"remainingRequest":"H:\\ideahome\\diploma\\diploma-admin\\node_modules\\babel-loader\\lib\\index.js!H:\\ideahome\\diploma\\diploma-admin\\src\\views\\shop\\attribute\\attribute.js","dependencies":[{"path":"H:\\ideahome\\diploma\\diploma-admin\\src\\views\\shop\\attribute\\attribute.js","mtime":1684858123614},{"path":"H:\\ideahome\\diploma\\diploma-admin\\babel.config.js","mtime":1680357702951},{"path":"H:\\ideahome\\diploma\\diploma-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1682168233438},{"path":"H:\\ideahome\\diploma\\diploma-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1682168240462}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/web.dom.iterable\");\nrequire(\"core-js/modules/es6.regexp.split\");\nrequire(\"core-js/modules/es6.function.name\");\nvar _dict = require(\"@/api/system/dict\");\nvar _default = {\n  data: function data() {\n    return {\n      formVisible: false,\n      formTitle: 'Add specification name',\n      deptList: [],\n      roleList: [],\n      isAdd: true,\n      permissons: [],\n      permissonVisible: false,\n      form: {\n        name: '',\n        id: '',\n        detail: '',\n        details: []\n      },\n      rules: {\n        name: [{\n          required: true,\n          message: 'Please enter the name of the specification',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 20,\n          message: 'Length from 2 to 20 characters',\n          trigger: 'blur'\n        }]\n      },\n      listQuery: {\n        name: undefined\n      },\n      list: null,\n      listLoading: true,\n      selRow: {}\n    };\n  },\n  filters: {\n    statusFilter: function statusFilter(status) {\n      var statusMap = {\n        published: 'success',\n        draft: 'gray',\n        deleted: 'danger'\n      };\n      return statusMap[status];\n    }\n  },\n  created: function created() {\n    this.init();\n  },\n  methods: {\n    init: function init() {\n      this.fetchData();\n    },\n    fetchData: function fetchData() {\n      var _this = this;\n      this.listLoading = true;\n      (0, _dict.getList)(this.listQuery).then(function (response) {\n        _this.list = response.data;\n        _this.listLoading = false;\n      }).catch(function () {});\n    },\n    search: function search() {\n      this.fetchData();\n    },\n    reset: function reset() {\n      this.listQuery.name = '';\n      this.fetchData();\n    },\n    handleFilter: function handleFilter() {\n      this.listQuery.page = 1;\n      this.getList();\n    },\n    handleClose: function handleClose() {},\n    handleCurrentChange: function handleCurrentChange(currentRow, oldCurrentRow) {\n      this.selRow = currentRow;\n    },\n    getDetails: function getDetails(list) {\n      console.log('list', list);\n    },\n    resetForm: function resetForm() {\n      this.form = {\n        name: '',\n        id: '',\n        details: [],\n        detail: []\n      };\n    },\n    add: function add() {\n      this.resetForm();\n      this.formTitle = 'Add specification name';\n      this.formVisible = true;\n      this.isAdd = true;\n    },\n    save: function save() {\n      var _this2 = this;\n      var self = this;\n      this.$refs['form'].validate(function (valid) {\n        if (valid) {\n          var dictName = self.form.name;\n          var dictValues = '';\n          for (var key in self.form.details) {\n            var item = self.form.details[key];\n            dictValues += item['key'] + ':' + item['value'] + ';';\n          }\n          if (_this2.form.id !== '') {\n            (0, _dict.update)({\n              id: self.form.id,\n              dictName: dictName,\n              dictValues: dictValues\n            }).then(function (response) {\n              _this2.$message({\n                message: 'Submitted successfully',\n                type: 'success'\n              });\n              self.fetchData();\n              self.formVisible = false;\n            });\n          } else {\n            (0, _dict.save)({\n              dictName: dictName,\n              dictValues: dictValues\n            }).then(function (response) {\n              _this2.$message({\n                message: 'Submitted successfully',\n                type: 'success'\n              });\n              self.fetchData();\n              self.formVisible = false;\n            });\n          }\n        } else {\n          return false;\n        }\n      });\n    },\n    checkSel: function checkSel() {\n      if (this.selRow && this.selRow.id) {\n        return true;\n      }\n      this.$message({\n        message: 'Please check the operation item',\n        type: 'warning'\n      });\n      return false;\n    },\n    edit: function edit() {\n      if (this.checkSel()) {\n        this.isAdd = false;\n        this.formTitle = 'Modify specification name';\n        var detail = this.selRow.detail.split(',');\n        var details = [];\n        detail.forEach(function (val, index) {\n          var arr = val.split(':');\n          details.push({\n            'key': arr[0],\n            'value': arr[1]\n          });\n        });\n        this.form = {\n          name: this.selRow.name,\n          id: this.selRow.id,\n          details: details,\n          detail: this.selRow.detail\n        };\n        this.formVisible = true;\n      }\n    },\n    remove: function remove() {\n      var _this3 = this;\n      if (this.checkSel()) {\n        var id = this.selRow.id;\n        this.$confirm('Sure to delete?', 'Tips', {\n          confirmButtonText: 'Confirm',\n          cancelButtonText: 'Cancel',\n          type: 'warning'\n        }).then(function () {\n          (0, _dict.remove)(id).then(function (response) {\n            _this3.$message({\n              message: 'Successful operation',\n              type: 'success'\n            });\n            _this3.fetchData();\n          });\n        }).catch(function () {});\n      }\n    },\n    addDetail: function addDetail() {\n      var details = this.form.details;\n      details.push({\n        value: '',\n        key: ''\n      });\n      this.form.details = details;\n    },\n    removeDetail: function removeDetail(detail) {\n      var details = [];\n      this.form.details.forEach(function (val, index) {\n        if (detail.key !== val.key) {\n          details.push(val);\n        }\n      });\n      this.form.details = details;\n    }\n  }\n};\nexports.default = _default;",null]}