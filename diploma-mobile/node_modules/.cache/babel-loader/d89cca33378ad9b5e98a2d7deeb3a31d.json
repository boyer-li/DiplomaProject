{"remainingRequest":"D:\\Java\\ideahome\\DiplomaProject\\linjiashop-mobile\\node_modules\\babel-loader\\lib\\index.js!D:\\Java\\ideahome\\DiplomaProject\\linjiashop-mobile\\src\\utils\\request.js","dependencies":[{"path":"D:\\Java\\ideahome\\DiplomaProject\\linjiashop-mobile\\src\\utils\\request.js","mtime":1683192024459},{"path":"D:\\Java\\ideahome\\DiplomaProject\\linjiashop-mobile\\babel.config.js","mtime":1683192016157},{"path":"D:\\Java\\ideahome\\DiplomaProject\\linjiashop-mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1683192017723},{"path":"D:\\Java\\ideahome\\DiplomaProject\\linjiashop-mobile\\node_modules\\babel-loader\\lib\\index.js","mtime":1683192017549}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Java/ideahome/DiplomaProject/linjiashop-mobile/node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"vant/es/toast/style\");\nvar _toast = _interopRequireDefault(require(\"vant/es/toast\"));\nrequire(\"core-js/modules/es6.regexp.replace\");\nvar _axios = _interopRequireDefault(require(\"axios\"));\nvar _router = require(\"@/router\");\nvar _store = _interopRequireDefault(require(\"@/store\"));\nvar _storage = _interopRequireDefault(require(\"@/utils/storage\"));\n// create an axios instance\nvar service = _axios.default.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // url = base url + request url\n  withCredentials: false,\n  // send cookies when cross-domain requests\n  timeout: 15000 // request timeout\n});\n\n// request interceptor\nservice.interceptors.request.use(function (config) {\n  if (_storage.default.getToken()) {\n    // 让每个请求携带自定义token 请根据实际情况自行修改\n    config.headers['Authorization'] = _storage.default.getToken();\n  }\n  return config;\n}, function (error) {\n  // do something with request error\n  return Promise.reject(error);\n});\n\n// response interceptor\nservice.interceptors.response.use(\n/**\r\n * If you want to get http information such as headers or status\r\n * Please return  response => response\r\n*/\n\n/**\r\n * Determine the request status by custom code\r\n * Here is just an example\r\n * You can also judge the status by HTTP Status Code\r\n */\nfunction (response) {\n  console.log('response', response);\n  if (response.headers.token) {\n    //如果后台通过header返回token，说明token已经更新，则更新客户端本地token\n    _store.default.dispatch('app/toggleToken', response.headers.token);\n  }\n  var res = response.data;\n  if (res.code !== 20000) {\n    return Promise.reject(res.msg || 'error');\n  } else {\n    return res;\n  }\n}, function (error) {\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        //如果后台返回401，则清空本地用户信息信息并跳转至登录页\n        _store.default.dispatch('app/toggleUser', {});\n        _store.default.dispatch('app/toggleToken', '');\n        _router.router.replace({\n          path: '/login',\n          query: {\n            redirect: _router.router.currentRoute.path\n          }\n        });\n        return Promise.reject(error.response.data.message);\n        break;\n      case 500:\n        if (error.response.data.message) {\n          if (error.response.data.message.indexOf('relogin') > -1) {\n            console.log('need relogin');\n            _store.default.dispatch('app/toggleUser', {});\n            _store.default.dispatch('app/toggleToken', '');\n            _router.router.replace({\n              path: '/login',\n              query: {\n                redirect: _router.router.currentRoute.path\n              }\n            });\n            return Promise.reject(error.response.data.message);\n          } else if (error.response.data.message.indexOf('该手机号已经绑定其他微信号') > -1) {\n            _store.default.dispatch('app/toggleUser', {});\n            _store.default.dispatch('app/toggleToken', '');\n            _toast.default.fail(error.response.data.message);\n            _router.router.replace({\n              path: '/login',\n              query: {\n                redirect: _router.router.currentRoute.path\n              }\n            });\n            return Promise.reject(error.response.data.message);\n          } else {\n            _toast.default.fail(error.response.data.message);\n            return Promise.reject(error.response.data.message);\n          }\n        }\n        break;\n      default:\n        return Promise.reject(error.response.data.message);\n    }\n  }\n});\nvar _default = service;\nexports.default = _default;",null]}